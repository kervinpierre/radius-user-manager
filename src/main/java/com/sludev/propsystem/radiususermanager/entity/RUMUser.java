package com.sludev.propsystem.radiususermanager.entity;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.envers.Audited;
import org.hibernate.annotations.Type;
import org.joda.time.DateTime;
import org.springframework.data.domain.Auditable;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import java.util.Collection;
import java.util.Set;
import java.util.UUID;

/**
 * Core User class for the service application.
 * <p>
 * This class is used as the base case for all user types in the system.
 *
 * Created by kervin on 2016-04-30.
 *
 * @author kervin
 */
@Entity
@Audited
// BUGFIX : http://stackoverflow.com/questions/24994440/no-serializer-found-for-class-org-hibernate-proxy-pojo-javassist-javassist
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
@JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property="@rumUserId")
@Table(name = "rum_user", uniqueConstraints = {@UniqueConstraint(columnNames = {"username"})})
public class RUMUser
        implements UserDetails, Auditable<RUMUser, UUID>
{
    private static final Logger LOGGER = LogManager.getLogger(RUMUser.class);

    private UUID id;
    private String username;
    private String password;
    private String email;
    private String firstName;
    private String lastName;
    private String confirmCode;
    private String statusNotes;
    private String notes;
    private String mainGroup;
    private int utype;
    private int status;
    private boolean enabled;
    private boolean canLogin;
    private boolean accountExpired;
    private boolean accountNonExpired;
    private boolean credExpired;
    private boolean credNonExpired;
    private boolean locked = false;
    private boolean accountNonLocked = false;
    private boolean radiusEnabled = false;
    private DateTime lastSeen;
    private DateTime created;
    private DateTime statusDate;
    private DateTime lastModified;
    private RUMUser createdByUser;
    private RUMUser lastModifiedUser;
    private Set<RUMGrantedAuthority> userAuthorities;
    private Set<RUMUserSecurityQA> securityQAs;
    private Set<RUMUser> createdUsers;
    private Set<RUMUser> lastModifiedUsers;

    /**
     * The user object's primary key.
     *
     * @return Autogenerated UUID
     */
    @Id
    @GeneratedValue(generator = "uuid2")
    @GenericGenerator(name = "uuid2", strategy = "uuid2")
    @Column(name = "id", unique = true, columnDefinition = "BINARY(16)")
    @Override
    public UUID getId()
    {
        return id;
    }

    public void setId(UUID uid)
    {
        id = uid;
    }

    @Column(name = "main_group")
    public String getMainGroup()
    {
        return mainGroup;
    }

    public void setMainGroup(String mainGroup)
    {
        this.mainGroup = mainGroup;
    }

    @Column(name = "email")
    public String getEmail()
    {
        return email;
    }

    public void setEmail(String email)
    {
        this.email = email;
    }

    @Column(name = "first_name")
    public String getFirstName()
    {
        return firstName;
    }

    public void setFirstName(String firstName)
    {
        this.firstName = firstName;
    }

    @Column(name = "last_name")
    public String getLastName()
    {
        return lastName;
    }

    public void setLastName(String lastName)
    {
        this.lastName = lastName;
    }

    @Column(name = "can_login")
    public boolean isCanLogin()
    {
        return canLogin;
    }

    public void setCanLogin(boolean canLogin)
    {
        this.canLogin = canLogin;
    }

    @Column(name = "account_expired")
    @Type(type = "numeric_boolean")
    public boolean isAccountExpired()
    {
        return accountExpired;
    }

    public void setAccountExpired(boolean accountExpired)
    {
        this.accountExpired = accountExpired;
    }

    @Column(name = "cred_expired")
    @Type(type = "numeric_boolean")
    public boolean isCredExpired()
    {
        return credExpired;
    }

    public void setCredExpired(boolean credExpired)
    {
        this.credExpired = credExpired;
    }

    @Column(name = "credentials_non_expired")
    @Type(type = "numeric_boolean")
    @Override
    public boolean isCredentialsNonExpired()
    {
        return credNonExpired;
    }

    public void setCredentialsNonExpired(boolean v)
    {
        credNonExpired = v;
    }

    @Column(name = "locked")
    @Type(type = "numeric_boolean")
    public boolean isLocked()
    {
        return locked;
    }

    public void setLocked(boolean locked)
    {
        this.locked = locked;
    }

    @Column(name = "last_seen")
    @Type(type="org.jadira.usertype.dateandtime.joda.PersistentDateTime")
    public DateTime getLastSeen()
    {
        return lastSeen;
    }

    public void setLastSeen(DateTime lastSeen)
    {
        this.lastSeen = lastSeen;
    }

    @Column(name = "confirm_code")
    public String getConfirmCode()
    {
        return confirmCode;
    }

    public void setConfirmCode(String confirmCode)
    {
        this.confirmCode = confirmCode;
    }

    @Column(name = "username", unique = true)
    public String getUsername()
    {
        return username;
    }

    public void setUsername(String username)
    {
        this.username = username;
    }

    @Override
    @Column(name = "password")
    public String getPassword()
    {
        return password;
    }

    public void setPassword(String password)
    {
        this.password = password;
    }

    @Override
    @Column(name = "enabled")
    public boolean isEnabled()
    {
        return enabled;
    }

    public void setEnabled(boolean enabled)
    {
        this.enabled = enabled;
    }

    @Column(name = "status")
    public int getStatus()
    {
        return status;
    }

    public void setStatus(int status)
    {
        this.status = status;
    }

    public void setConfirmcode(String confirmcode)
    {
        this.confirmCode = confirmcode;
    }

    @Column(name = "status_notes")
    public String getStatusNotes()
    {
        return statusNotes;
    }

    public void setStatusNotes(String notes)
    {
        this.statusNotes = notes;
    }

    @Column(name = "notes")
    public String getNotes()
    {
        return notes;
    }

    public void setNotes(String notes)
    {
        this.notes = notes;
    }

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "rumUser")
    public Set<RUMGrantedAuthority> getUserAuthorities()
    {
        return userAuthorities;
    }

    public void setUserAuthorities(Set<RUMGrantedAuthority> auth)
    {
        userAuthorities = auth;
    }

    @Column(name = "status_date")
    @Type(type="org.jadira.usertype.dateandtime.joda.PersistentDateTime")
    public DateTime getStatusDate()
    {
        return statusDate;
    }

    public void setStatusDate(DateTime statusDate)
    {
        this.statusDate = statusDate;
    }

    @Column(name = "utype")
    public int getUType()
    {
        return utype;
    }

    public void setUType(int utype)
    {
        this.utype = utype;
    }

    @Column(name = "radius_enabled")
    @Type(type = "numeric_boolean")
    public boolean isRadiusEnabled()
    {
        return radiusEnabled;
    }

    public void setRadiusEnabled(boolean r)
    {
        radiusEnabled= r;
    }

    @Column(name = "account_non_expired")
    @Type(type = "numeric_boolean")
    public boolean isAccountNonExpired()
    {
        return accountNonExpired;
    }

    public void setAccountNonExpired(boolean v)
    {
        accountNonExpired = v;
    }

    @Column(name = "account_non_locked")
    @Type(type = "numeric_boolean")
    @Override
    public boolean isAccountNonLocked()
    {
        return accountNonLocked;
    }

    public void setAccountNonLocked(boolean v)
    {
        accountNonLocked = v;
    }

    @OneToMany(mappedBy = "rumUser", fetch = FetchType.EAGER)
    public Set<RUMUserSecurityQA> getSecurityQAs()
    {
        return securityQAs;
    }

    public void setSecurityQAs(Set<RUMUserSecurityQA> securityQAs)
    {
        this.securityQAs = securityQAs;
    }

    @Override
    public int hashCode()
    {
        return new HashCodeBuilder(17, 37).
                append(username).
                append(created).
                append(password).
                append(notes).
                append(status).
                append(statusNotes).
                toHashCode();
    }

    @Override
    public boolean equals(Object obj)
    {
        if( obj == null )
        {
            return false;
        }

        if( obj == this )
        {
            return true;
        }

        if( obj.getClass() != getClass() )
        {
            return false;
        }

        RUMUser rhs = (RUMUser) obj;
        return new EqualsBuilder()
                .appendSuper(super.equals(obj))
                .append(username, username)
                .append(password, rhs.password)
                .append(created, rhs.created)
                .append(notes, rhs.notes)
                .append(statusNotes, rhs.statusNotes)
                .isEquals();
    }

    /**
     * Return the Granted Authorities on this user.
     *
     * @return
     */
    @Transient
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities()
    {
        return getUserAuthorities();
    }

    /*
    ** Created By.
    ** 1-to-Many self-referential mapping.
    */

    /**
     * The user who created this object.
     *
     * @return
     */
    @ManyToOne(cascade = {CascadeType.ALL})
    @JoinColumn(name = "created_by_id")
    @Override
    public RUMUser getCreatedBy()
    {
        return createdByUser;
    }

    /**
     * The mainGroup of users we have created.
     *
     * @return
     */
    @OneToMany(mappedBy = "createdBy")
    public Set<RUMUser> getCreatedUsers()
    {
        return createdUsers;
    }

    @Override
    public void setCreatedBy(RUMUser u)
    {
        createdByUser = u;
    }

    public void setCreatedUsers(Set<RUMUser> u)
    {
        createdUsers = u;
    }

    /*************************/

    /**
     ** Last Modified By.
     ** 1-to-Many self-referential mapping.
     */

    /**
     * The last user to modify this object
     *
     * @return
     */
    @ManyToOne(cascade = {CascadeType.ALL})
    @JoinColumn(name = "lastModifiedBy")
    @Override
    public RUMUser getLastModifiedBy()
    {
        return lastModifiedUser;
    }

    /**
     * The mainGroup of users we're on the hook for modifying last.
     *
     * @return
     */
    @OneToMany(mappedBy = "lastModifiedBy")
    public Set<RUMUser> getLastModifiedUsers()
    {
        return lastModifiedUsers;
    }

    @Override
    public void setLastModifiedBy(RUMUser u)
    {
        lastModifiedUser = u;
    }

    public void setLastModifiedUsers(Set<RUMUser> u)
    {
        lastModifiedUsers = u;
    }

    /*************************/

    /**
     * The date and time this object was created.
     *
     * @return
     */
    @Column(name = "create_date")
    @Type(type="org.jadira.usertype.dateandtime.joda.PersistentDateTime")
    @Override
    public DateTime getCreatedDate()
    {
        return created;
    }

    @Override
    public void setCreatedDate(DateTime dt)
    {
        created = dt;
    }

    @Column(name = "last_modified_date")
    @Type(type="org.jadira.usertype.dateandtime.joda.PersistentDateTime")
    @Override
    public DateTime getLastModifiedDate()
    {
        return lastModified;
    }

    @Override
    public void setLastModifiedDate(DateTime dt)
    {
        lastModified = dt;
    }

    /**
     * FIXME: This is probably not entirely accurate.
     *
     * @return
     */
    @Transient
    @Override
    public boolean isNew()
    {
        return id == null;
    }
}
